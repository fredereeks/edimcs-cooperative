// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum accountType {
  Savings
  Current
  Fixed
}

enum ActivityStatus {
  Pending
  Running
  Completed
  Suspended
}

enum InvestmentType {
  Silver
  Gold
  Platinum
}

enum MemberType {
  User
  Admin
}

enum Status {
  Pending
  Active
  Disabled
}

model Member {
  id         String     @id @default(uuid())
  firstname  String     @db.VarChar(50)
  middlename String?    @db.VarChar(50)
  lastname   String     @db.VarChar(50)
  email      String     @unique @db.VarChar(100)
  memberId   String     @unique @db.VarChar(10)
  password   String     @db.VarChar(20)
  image      String?    @db.VarChar(200)
  phone      String?    @db.VarChar(15)
  address    String?    @db.VarChar(200)
  type       MemberType @default(User)
  status     Status     @default(Pending)
  token      String?    @db.VarChar(40)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now()) @updatedAt
  updatedBy  String?    @db.VarChar(50)

  accountDetails   AccountNumber[]
  loans            Loan[]
  savings          Saving[]
  sentMessages     Message[]       @relation("sender")
  receivedMessages Message[]       @relation("receiver")
  investments      Investment[]    @relation("investment")
  beneficiary      Investment[]    @relation("beneficiary")

  @@index([id, memberId])
}

model AccountNumber {
  id            String      @id @default(uuid())
  banker        String      @db.VarChar(100)
  accountnumber String      @db.VarChar(20)
  type          accountType @default(Savings)
  owner         Member?     @relation(fields: [accountOwner], references: [id])
  accountOwner  String?
}

model Investment {
  id            String         @id @default(uuid())
  type          InvestmentType @default(Silver)
  status        ActivityStatus @default(Pending)
  investor      Member         @relation("investment", fields: [investorId], references: [id])
  investorId    String
  beneficiary   Member?        @relation("beneficiary", fields: [beneficiaryId], references: [id])
  beneficiaryId String?
  nextDueDate   DateTime?       
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  updatedBy     String?        @db.VarChar(50)
}

model Loan {
  id        String         @id @default(uuid())
  amount    Int            @db.Int
  loaner    Member?        @relation(fields: [loanerId], references: [id])
  loanerId  String?
  status    ActivityStatus @default(Pending)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now()) @updatedAt
  updatedBy String?        @db.VarChar(50)
}

model Saving {
  id        String         @id @default(uuid())
  amount    Int            @db.Int
  saver     Member?        @relation(fields: [saverId], references: [id])
  saverId   String?
  status    ActivityStatus @default(Pending)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now()) @updatedAt
  updatedBy String?        @db.VarChar(50)
}

model Message {
  id               String   @id @default(uuid())
  text             String
  sender           Member   @relation("sender", fields: [senderId], references: [id])
  senderId         String
  receiver         Member   @relation("receiver", fields: [receiverId], references: [id])
  receiverId       String
  statusToReceiver String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
}
