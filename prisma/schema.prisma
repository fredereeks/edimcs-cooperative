// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum accountType {
  Savings
  Current
  Fixed
}

enum ActivityStatus {
  Pending
  Running
  Completed
  Suspended
}

enum InvestmentType {
  Silver
  Gold
  Platinum
}

enum MemberType {
  Member
  Admin
}

enum MemberRating {
  Basic
  Standard
  StandardPlus
  Premium
}

enum Status {
  Pending
  Active
  Disabled
}

enum TransStatus {
  Pending
  Completed
  Rejected
}

enum TransVerdict {
  Pending
  Granted
  Rejected
  Cancelled
}

// <=== MODELS ===>
model Member {
  id               String          @id @default(uuid())
  firstname        String          @db.VarChar(50)
  middlename       String?         @db.VarChar(50)
  lastname         String          @db.VarChar(50)
  email            String          @unique @db.VarChar(100)
  memberId         String          @unique @db.VarChar(15)
  password         String          @db.VarChar(100)
  image            String?         @db.Text()
  phone            String?         @db.VarChar(15)
  address          String?         @db.VarChar(200)
  type             MemberType      @default(Member)
  status           Status          @default(Pending)
  token            String?         @db.VarChar(40)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @default(now()) @updatedAt
  updatedBy        String?         @db.VarChar(50)
  loanRating       MemberRating    @default(Basic)
  accountDetails   AccountNumber[]
  loans            Loan[]
  savings          Saving[]
  deposits         Deposit[]
  withdrawals      Withdrawal[]
  sentMessages     Message[]       @relation("sender")
  receivedMessages Message[]       @relation("receiver")
  investments      Investment[]    @relation("investment")
  beneficiary      Investment[]    @relation("beneficiary")
  balance          Int             @default(0)

  @@index([id, memberId])
}

model AccountNumber {
  id            String      @id @default(uuid())
  banker        String      @db.VarChar(100)
  accountnumber String      @db.VarChar(20)
  type          accountType @default(Savings)
  owner         Member?     @relation(fields: [memberId], references: [id])
  memberId      String?     @unique
}

model Contact {
  id        String   @id @default(cuid())
  firstname String
  lastname  String
  email     String
  phone     String
  message   String   @db.LongText()
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  updatedBy String?
}

model Deposit {
  id          String       @id @default(uuid())
  amount      Int          @db.Int
  interest    Int?         @db.MediumInt
  depositor   Member?      @relation(fields: [depositorId], references: [id])
  depositorId String
  status      TransStatus  @default(Pending)
  verdict     TransVerdict @default(Pending)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  updatedBy   String?      @db.VarChar(50)
}

model Investment {
  id            String         @id @default(uuid())
  amount        Int            @db.Int
  payback       Int?           @db.Int
  interest      Int            @db.Int
  type          InvestmentType @default(Silver)
  status        TransStatus    @default(Pending)
  verdict       TransVerdict   @default(Pending)
  investor      Member         @relation("investment", fields: [investorId], references: [id])
  investorId    String
  beneficiary   Member?        @relation("beneficiary", fields: [beneficiaryId], references: [id])
  beneficiaryId String?
  nextDueDate   DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  updatedBy     String?        @db.VarChar(50)
}

model Loan {
  id        String         @id @default(uuid())
  amount    Int            @db.Int
  loaner    Member?        @relation(fields: [loanerId], references: [id])
  loanerId  String?
  status    ActivityStatus @default(Pending)
  verdict   TransVerdict   @default(Pending)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now()) @updatedAt
  updatedBy String?        @db.VarChar(50)
}

model Saving {
  id        String         @id @default(uuid())
  amount    Int            @db.Int
  interest  Int?           @db.MediumInt
  saver     Member?        @relation(fields: [saverId], references: [id])
  saverId   String
  status    ActivityStatus @default(Pending)
  verdict   TransVerdict   @default(Pending)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now()) @updatedAt
  updatedBy String?        @db.VarChar(50)
}

model Message {
  id               String   @id @default(uuid())
  text             String
  sender           Member   @relation("sender", fields: [senderId], references: [id])
  senderId         String
  receiver         Member   @relation("receiver", fields: [receiverId], references: [id])
  receiverId       String
  statusToReceiver String
  statusToSender   String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
}

model Withdrawal {
  id           String       @id @default(uuid())
  amount       Int          @db.Int
  interest     Int?         @db.MediumInt
  withdrawer   Member?      @relation(fields: [withdrawerId], references: [id])
  withdrawerId String
  status       TransStatus  @default(Pending)
  verdict      TransVerdict @default(Pending)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now()) @updatedAt
  updatedBy    String?      @db.VarChar(50)
}

// model Transactions {
//   id                String          @id @default(uuid())
//   amount            String
//   member            Member          @relation("sender", fields: [memberId], references: [id])
//   memberId          String
//   type              String 
//   receiverId        String
//   statusToReceiver  String
//   createdAt         DateTime        @default(now())
//   updatedAt         DateTime        @default(now()) @updatedAt
// }


// ===CTTI

enum UserType {
  User
  Instructor
  Admin
}
enum ReadStatus {
  Read
  Unread
}
model Enquiry {
  id         String     @id @default(cuid())
  firstname  String
  middlename String?
  lastname   String
  email      String
  phone      String?
  image      String?
  type       UserType   @default(User)
  message    String     @db.LongText()
  country    String?
  state      String?
  status     ReadStatus @default(Unread)
  // course     Course     @relation(fields: [courseId], references: [id])
  courseId   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now()) @updatedAt
  updatedBy  String?
}


model ContactMessage {
  id         String     @id @default(cuid())
  firstname  String
  middlename String?
  lastname   String
  email      String
  phone      String
  country    String?
  state      String?
  message    String     @db.LongText()
  status     ReadStatus @default(Unread)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now()) @updatedAt
  updatedBy  String?
}